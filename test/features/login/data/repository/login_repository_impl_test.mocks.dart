// Mocks generated by Mockito 5.3.2 from annotations
// in ecom_clean_code/test/features/login/data/repository/login_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:ecom_clean_code/features/login/data/datasource/login_remote_data_source.dart'
    as _i4;
import 'package:ecom_clean_code/features/login/data/model/login_data_model.dart'
    as _i2;
import 'package:http/http.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeLoginDataModel_0 extends _i1.SmartFake
    implements _i2.LoginDataModel {
  _FakeLoginDataModel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResponse_1 extends _i1.SmartFake implements _i3.Response {
  _FakeResponse_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [LoginRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginRemoteDataSource extends _i1.Mock
    implements _i4.LoginRemoteDataSource {
  MockLoginRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.LoginDataModel> loginUser(
    String? username,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #loginUser,
          [
            username,
            password,
          ],
        ),
        returnValue: _i5.Future<_i2.LoginDataModel>.value(_FakeLoginDataModel_0(
          this,
          Invocation.method(
            #loginUser,
            [
              username,
              password,
            ],
          ),
        )),
      ) as _i5.Future<_i2.LoginDataModel>);
  @override
  _i5.Future<_i3.Response> performPostRequest(
    String? endpoint,
    Object? parameter,
    Map<String, String>? header,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #performPostRequest,
          [
            endpoint,
            parameter,
            header,
          ],
        ),
        returnValue: _i5.Future<_i3.Response>.value(_FakeResponse_1(
          this,
          Invocation.method(
            #performPostRequest,
            [
              endpoint,
              parameter,
              header,
            ],
          ),
        )),
      ) as _i5.Future<_i3.Response>);
  @override
  _i5.Future<_i3.Response> performGetRequest(String? endpoint) =>
      (super.noSuchMethod(
        Invocation.method(
          #performGetRequest,
          [endpoint],
        ),
        returnValue: _i5.Future<_i3.Response>.value(_FakeResponse_1(
          this,
          Invocation.method(
            #performGetRequest,
            [endpoint],
          ),
        )),
      ) as _i5.Future<_i3.Response>);
}
